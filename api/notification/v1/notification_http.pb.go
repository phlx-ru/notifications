// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.4
// source: notification/v1/notification.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotificationCheck = "/notification.v1.Notification/Check"
const OperationNotificationEnqueue = "/notification.v1.Notification/Enqueue"
const OperationNotificationSend = "/notification.v1.Notification/Send"

type NotificationHTTPServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Enqueue(context.Context, *SendRequest) (*EnqueueResponse, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
}

func RegisterNotificationHTTPServer(s *http.Server, srv NotificationHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/enqueue", _Notification_Enqueue0_HTTP_Handler(srv))
	r.POST("/v1/send", _Notification_Send0_HTTP_Handler(srv))
	r.POST("/v1/check", _Notification_Check0_HTTP_Handler(srv))
}

func _Notification_Enqueue0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationEnqueue)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Enqueue(ctx, req.(*SendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnqueueResponse)
		return ctx.Result(200, reply)
	}
}

func _Notification_Send0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationSend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Send(ctx, req.(*SendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendResponse)
		return ctx.Result(200, reply)
	}
}

func _Notification_Check0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*CheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

type NotificationHTTPClient interface {
	Check(ctx context.Context, req *CheckRequest, opts ...http.CallOption) (rsp *CheckResponse, err error)
	Enqueue(ctx context.Context, req *SendRequest, opts ...http.CallOption) (rsp *EnqueueResponse, err error)
	Send(ctx context.Context, req *SendRequest, opts ...http.CallOption) (rsp *SendResponse, err error)
}

type NotificationHTTPClientImpl struct {
	cc *http.Client
}

func NewNotificationHTTPClient(client *http.Client) NotificationHTTPClient {
	return &NotificationHTTPClientImpl{client}
}

func (c *NotificationHTTPClientImpl) Check(ctx context.Context, in *CheckRequest, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/v1/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationHTTPClientImpl) Enqueue(ctx context.Context, in *SendRequest, opts ...http.CallOption) (*EnqueueResponse, error) {
	var out EnqueueResponse
	pattern := "/v1/enqueue"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationEnqueue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationHTTPClientImpl) Send(ctx context.Context, in *SendRequest, opts ...http.CallOption) (*SendResponse, error) {
	var out SendResponse
	pattern := "/v1/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationSend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
