syntax = "proto3";

package notification.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";

option go_package = "notifications/api/notification/v1;v1";

// This API provides simple interface for send custom notifications in various channel with obvious behaviour.
service Notification {

  // Enqueues notification to internal queue with maximum latency 1000ms
  rpc Enqueue (SendRequest) returns (EnqueueResponse) {
    option (google.api.http) = {
      post: "/v1/enqueue"
      body: "*"
    };
  }

  // Immediately send notification to recipient â€” waiting for response may be long
  rpc Send (SendRequest) returns (SendResponse) {
    option (google.api.http) = {
      post: "/v1/send"
      body: "*"
    };
  }

  // Check notification status by id
  rpc Check (CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post: "/v1/check"
      body: "*"
    };
  }
}

// Types of notification channel
enum Type {
  plain = 0;
  email = 1;
  sms = 2;
  push = 3;
  telegram = 4;
  whatsapp = 5;
}

// Notification statuses
enum Status {
  draft = 0;
  pending = 1;
  sent = 2;
  retry = 3;
  fail = 4;
}

// Basic notification request
message SendRequest {
  // Type of notification channel
  Type type = 1 [
    (google.api.field_behavior) = REQUIRED
  ];

  // Notification message payload
  map<string, string> payload = 2 [
    (google.api.field_behavior) = REQUIRED
  ];

  // Planned time to send message (works with enqueue)
  google.protobuf.Timestamp plannedAt = 3;

  // Time to Live for notification in seconds
  uint64 ttl = 4;

  // Sender identifier (user id from auth service)
  int64 senderId = 5;
}

// Response by sending message
message SendResponse {
  // Notification identifier
  int64 id = 1;

  // Is notification was sent? May be false if it will enqueued
  bool sent = 2;
}

// Response by enqueuing message
message EnqueueResponse {
  // Notification identifier
  int64 id = 1;
}

// Request for check status
message CheckRequest {
  // Notification identifier
  int64 id = 1;
}

// Response for check status
message CheckResponse {
  // Notification status number
  Status status = 1;
}
