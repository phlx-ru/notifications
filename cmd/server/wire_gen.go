// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"notifications/internal/biz"
	"notifications/internal/conf"
	"notifications/internal/data"
	"notifications/internal/pkg/metrics"
	"notifications/internal/senders"
	"notifications/internal/server"
	"notifications/internal/service"
)

// Injectors from wire.go:

// wireData init database
func wireData(confData *conf.Data, logger log.Logger) (data.Database, func(), error) {
	database, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	return database, func() {
		cleanup()
	}, nil
}

// wireApp init kratos application.
func wireApp(contextContext context.Context, database data.Database, confServer *conf.Server, sendersSenders *senders.Senders, metricsMetrics metrics.Metrics, logger log.Logger) (*kratos.App, error) {
	notificationRepo := data.NewNotificationRepo(database, logger, metricsMetrics)
	notificationUsecase := biz.NewNotificationUsecase(notificationRepo, sendersSenders, metricsMetrics, logger)
	notificationService := service.NewNotificationService(notificationUsecase, sendersSenders, logger)
	grpcServer := server.NewGRPCServer(confServer, notificationService, metricsMetrics, logger)
	httpServer := server.NewHTTPServer(confServer, notificationService, metricsMetrics, logger)
	app := newApp(contextContext, logger, grpcServer, httpServer)
	return app, nil
}
