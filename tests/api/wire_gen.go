// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/transport/http"
	"notifications/internal/biz"
	"notifications/internal/conf"
	"notifications/internal/data"
	"notifications/internal/pkg/metrics"
	"notifications/internal/senders"
	"notifications/internal/server"
	"notifications/internal/service"
)

// Injectors from wire.go:

// wireData init database
func wireData(confData *conf.Data, logger log.Logger) (data.Database, func(), error) {
	dataDatabase, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	return dataDatabase, func() {
		cleanup()
	}, nil
}

func wireNotificationRepo(dataDatabase data.Database, logger log.Logger, metricsMetrics metrics.Metrics) biz.NotificationRepo {
	bizNotificationRepo := data.NewNotificationRepo(dataDatabase, logger, metricsMetrics)
	return bizNotificationRepo
}

func wireHTTPServer(dataDatabase data.Database, confServer *conf.Server, sendersSenders *senders.Senders, metricsMetrics metrics.Metrics, logger log.Logger) *http.Server {
	bizNotificationRepo := data.NewNotificationRepo(dataDatabase, logger, metricsMetrics)
	notificationUsecase := biz.NewNotificationUsecase(bizNotificationRepo, sendersSenders, metricsMetrics, logger)
	notificationService := service.NewNotificationService(notificationUsecase, sendersSenders, logger)
	server2 := server.NewHTTPServer(confServer, notificationService, metricsMetrics, logger)
	return server2
}
