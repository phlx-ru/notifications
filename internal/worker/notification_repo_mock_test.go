// Code generated by MockGen. DO NOT EDIT.
// Source: ./worker_test.go

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	sql "database/sql"
	ent "notifications/ent"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepo is a mock of NotificationRepo interface.
type MockNotificationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepoMockRecorder
}

// MockNotificationRepoMockRecorder is the mock recorder for MockNotificationRepo.
type MockNotificationRepoMockRecorder struct {
	mock *MockNotificationRepo
}

// NewMockNotificationRepo creates a new mock instance.
func NewMockNotificationRepo(ctrl *gomock.Controller) *MockNotificationRepo {
	mock := &MockNotificationRepo{ctrl: ctrl}
	mock.recorder = &MockNotificationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepo) EXPECT() *MockNotificationRepoMockRecorder {
	return m.recorder
}

// CountWaitingNotifications mocks base method.
func (m *MockNotificationRepo) CountWaitingNotifications(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWaitingNotifications", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWaitingNotifications indicates an expected call of CountWaitingNotifications.
func (mr *MockNotificationRepoMockRecorder) CountWaitingNotifications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWaitingNotifications", reflect.TypeOf((*MockNotificationRepo)(nil).CountWaitingNotifications), ctx)
}

// FindByID mocks base method.
func (m *MockNotificationRepo) FindByID(arg0 context.Context, arg1 int64) (*ent.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*ent.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNotificationRepoMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNotificationRepo)(nil).FindByID), arg0, arg1)
}

// ListWaitingNotificationsWithLock mocks base method.
func (m *MockNotificationRepo) ListWaitingNotificationsWithLock(ctx context.Context, limit int) ([]*ent.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWaitingNotificationsWithLock", ctx, limit)
	ret0, _ := ret[0].([]*ent.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWaitingNotificationsWithLock indicates an expected call of ListWaitingNotificationsWithLock.
func (mr *MockNotificationRepoMockRecorder) ListWaitingNotificationsWithLock(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaitingNotificationsWithLock", reflect.TypeOf((*MockNotificationRepo)(nil).ListWaitingNotificationsWithLock), ctx, limit)
}

// Save mocks base method.
func (m *MockNotificationRepo) Save(arg0 context.Context, arg1 *ent.Notification) (*ent.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*ent.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockNotificationRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotificationRepo)(nil).Save), arg0, arg1)
}

// Transaction mocks base method.
func (m *MockNotificationRepo) Transaction(ctx context.Context, txOptions *sql.TxOptions, actions ...func(context.Context) error) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, txOptions}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockNotificationRepoMockRecorder) Transaction(ctx, txOptions interface{}, actions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, txOptions}, actions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockNotificationRepo)(nil).Transaction), varargs...)
}

// Update mocks base method.
func (m *MockNotificationRepo) Update(arg0 context.Context, arg1 *ent.Notification) (*ent.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*ent.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNotificationRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationRepo)(nil).Update), arg0, arg1)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendHTML mocks base method.
func (m *MockEmailSender) SendHTML(to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHTML", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHTML indicates an expected call of SendHTML.
func (mr *MockEmailSenderMockRecorder) SendHTML(to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHTML", reflect.TypeOf((*MockEmailSender)(nil).SendHTML), to, subject, body)
}

// SendText mocks base method.
func (m *MockEmailSender) SendText(to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendText", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendText indicates an expected call of SendText.
func (mr *MockEmailSenderMockRecorder) SendText(to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendText", reflect.TypeOf((*MockEmailSender)(nil).SendText), to, subject, body)
}

// MockPlainSender is a mock of PlainSender interface.
type MockPlainSender struct {
	ctrl     *gomock.Controller
	recorder *MockPlainSenderMockRecorder
}

// MockPlainSenderMockRecorder is the mock recorder for MockPlainSender.
type MockPlainSenderMockRecorder struct {
	mock *MockPlainSender
}

// NewMockPlainSender creates a new mock instance.
func NewMockPlainSender(ctrl *gomock.Controller) *MockPlainSender {
	mock := &MockPlainSender{ctrl: ctrl}
	mock.recorder = &MockPlainSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlainSender) EXPECT() *MockPlainSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockPlainSender) Send(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlainSenderMockRecorder) Send(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlainSender)(nil).Send), message)
}
