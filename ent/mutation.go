// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notifications/ent/notification"
	"notifications/ent/predicate"
	"notifications/ent/schema"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNotification = "Notification"
)

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	sender_id     *int
	addsender_id  *int
	_type         *schema.NotificationType
	payload       *schema.Payload
	ttl           *int
	addttl        *int
	status        *schema.NotificationStatus
	created_at    *time.Time
	updated_at    *time.Time
	planned_at    *time.Time
	retry_at      *time.Time
	retries       *int
	addretries    *int
	sent_at       *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Notification, error)
	predicates    []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id int) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSenderID sets the "sender_id" field.
func (m *NotificationMutation) SetSenderID(i int) {
	m.sender_id = &i
	m.addsender_id = nil
}

// SenderID returns the value of the "sender_id" field in the mutation.
func (m *NotificationMutation) SenderID() (r int, exists bool) {
	v := m.sender_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderID returns the old "sender_id" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldSenderID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderID: %w", err)
	}
	return oldValue.SenderID, nil
}

// AddSenderID adds i to the "sender_id" field.
func (m *NotificationMutation) AddSenderID(i int) {
	if m.addsender_id != nil {
		*m.addsender_id += i
	} else {
		m.addsender_id = &i
	}
}

// AddedSenderID returns the value that was added to the "sender_id" field in this mutation.
func (m *NotificationMutation) AddedSenderID() (r int, exists bool) {
	v := m.addsender_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSenderID resets all changes to the "sender_id" field.
func (m *NotificationMutation) ResetSenderID() {
	m.sender_id = nil
	m.addsender_id = nil
}

// SetType sets the "type" field.
func (m *NotificationMutation) SetType(st schema.NotificationType) {
	m._type = &st
}

// GetType returns the value of the "type" field in the mutation.
func (m *NotificationMutation) GetType() (r schema.NotificationType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldType(ctx context.Context) (v schema.NotificationType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *NotificationMutation) ResetType() {
	m._type = nil
}

// SetPayload sets the "payload" field.
func (m *NotificationMutation) SetPayload(s schema.Payload) {
	m.payload = &s
}

// Payload returns the value of the "payload" field in the mutation.
func (m *NotificationMutation) Payload() (r schema.Payload, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldPayload(ctx context.Context) (v schema.Payload, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ResetPayload resets all changes to the "payload" field.
func (m *NotificationMutation) ResetPayload() {
	m.payload = nil
}

// SetTTL sets the "ttl" field.
func (m *NotificationMutation) SetTTL(i int) {
	m.ttl = &i
	m.addttl = nil
}

// TTL returns the value of the "ttl" field in the mutation.
func (m *NotificationMutation) TTL() (r int, exists bool) {
	v := m.ttl
	if v == nil {
		return
	}
	return *v, true
}

// OldTTL returns the old "ttl" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldTTL(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTTL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTTL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTTL: %w", err)
	}
	return oldValue.TTL, nil
}

// AddTTL adds i to the "ttl" field.
func (m *NotificationMutation) AddTTL(i int) {
	if m.addttl != nil {
		*m.addttl += i
	} else {
		m.addttl = &i
	}
}

// AddedTTL returns the value that was added to the "ttl" field in this mutation.
func (m *NotificationMutation) AddedTTL() (r int, exists bool) {
	v := m.addttl
	if v == nil {
		return
	}
	return *v, true
}

// ResetTTL resets all changes to the "ttl" field.
func (m *NotificationMutation) ResetTTL() {
	m.ttl = nil
	m.addttl = nil
}

// SetStatus sets the "status" field.
func (m *NotificationMutation) SetStatus(ss schema.NotificationStatus) {
	m.status = &ss
}

// Status returns the value of the "status" field in the mutation.
func (m *NotificationMutation) Status() (r schema.NotificationStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldStatus(ctx context.Context) (v schema.NotificationStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *NotificationMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPlannedAt sets the "planned_at" field.
func (m *NotificationMutation) SetPlannedAt(t time.Time) {
	m.planned_at = &t
}

// PlannedAt returns the value of the "planned_at" field in the mutation.
func (m *NotificationMutation) PlannedAt() (r time.Time, exists bool) {
	v := m.planned_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPlannedAt returns the old "planned_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldPlannedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlannedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlannedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlannedAt: %w", err)
	}
	return oldValue.PlannedAt, nil
}

// ResetPlannedAt resets all changes to the "planned_at" field.
func (m *NotificationMutation) ResetPlannedAt() {
	m.planned_at = nil
}

// SetRetryAt sets the "retry_at" field.
func (m *NotificationMutation) SetRetryAt(t time.Time) {
	m.retry_at = &t
}

// RetryAt returns the value of the "retry_at" field in the mutation.
func (m *NotificationMutation) RetryAt() (r time.Time, exists bool) {
	v := m.retry_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryAt returns the old "retry_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldRetryAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryAt: %w", err)
	}
	return oldValue.RetryAt, nil
}

// ClearRetryAt clears the value of the "retry_at" field.
func (m *NotificationMutation) ClearRetryAt() {
	m.retry_at = nil
	m.clearedFields[notification.FieldRetryAt] = struct{}{}
}

// RetryAtCleared returns if the "retry_at" field was cleared in this mutation.
func (m *NotificationMutation) RetryAtCleared() bool {
	_, ok := m.clearedFields[notification.FieldRetryAt]
	return ok
}

// ResetRetryAt resets all changes to the "retry_at" field.
func (m *NotificationMutation) ResetRetryAt() {
	m.retry_at = nil
	delete(m.clearedFields, notification.FieldRetryAt)
}

// SetRetries sets the "retries" field.
func (m *NotificationMutation) SetRetries(i int) {
	m.retries = &i
	m.addretries = nil
}

// Retries returns the value of the "retries" field in the mutation.
func (m *NotificationMutation) Retries() (r int, exists bool) {
	v := m.retries
	if v == nil {
		return
	}
	return *v, true
}

// OldRetries returns the old "retries" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldRetries(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetries is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetries requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetries: %w", err)
	}
	return oldValue.Retries, nil
}

// AddRetries adds i to the "retries" field.
func (m *NotificationMutation) AddRetries(i int) {
	if m.addretries != nil {
		*m.addretries += i
	} else {
		m.addretries = &i
	}
}

// AddedRetries returns the value that was added to the "retries" field in this mutation.
func (m *NotificationMutation) AddedRetries() (r int, exists bool) {
	v := m.addretries
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetries resets all changes to the "retries" field.
func (m *NotificationMutation) ResetRetries() {
	m.retries = nil
	m.addretries = nil
}

// SetSentAt sets the "sent_at" field.
func (m *NotificationMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *NotificationMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldSentAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ClearSentAt clears the value of the "sent_at" field.
func (m *NotificationMutation) ClearSentAt() {
	m.sent_at = nil
	m.clearedFields[notification.FieldSentAt] = struct{}{}
}

// SentAtCleared returns if the "sent_at" field was cleared in this mutation.
func (m *NotificationMutation) SentAtCleared() bool {
	_, ok := m.clearedFields[notification.FieldSentAt]
	return ok
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *NotificationMutation) ResetSentAt() {
	m.sent_at = nil
	delete(m.clearedFields, notification.FieldSentAt)
}

// Where appends a list predicates to the NotificationMutation builder.
func (m *NotificationMutation) Where(ps ...predicate.Notification) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.sender_id != nil {
		fields = append(fields, notification.FieldSenderID)
	}
	if m._type != nil {
		fields = append(fields, notification.FieldType)
	}
	if m.payload != nil {
		fields = append(fields, notification.FieldPayload)
	}
	if m.ttl != nil {
		fields = append(fields, notification.FieldTTL)
	}
	if m.status != nil {
		fields = append(fields, notification.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, notification.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notification.FieldUpdatedAt)
	}
	if m.planned_at != nil {
		fields = append(fields, notification.FieldPlannedAt)
	}
	if m.retry_at != nil {
		fields = append(fields, notification.FieldRetryAt)
	}
	if m.retries != nil {
		fields = append(fields, notification.FieldRetries)
	}
	if m.sent_at != nil {
		fields = append(fields, notification.FieldSentAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldSenderID:
		return m.SenderID()
	case notification.FieldType:
		return m.GetType()
	case notification.FieldPayload:
		return m.Payload()
	case notification.FieldTTL:
		return m.TTL()
	case notification.FieldStatus:
		return m.Status()
	case notification.FieldCreatedAt:
		return m.CreatedAt()
	case notification.FieldUpdatedAt:
		return m.UpdatedAt()
	case notification.FieldPlannedAt:
		return m.PlannedAt()
	case notification.FieldRetryAt:
		return m.RetryAt()
	case notification.FieldRetries:
		return m.Retries()
	case notification.FieldSentAt:
		return m.SentAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldSenderID:
		return m.OldSenderID(ctx)
	case notification.FieldType:
		return m.OldType(ctx)
	case notification.FieldPayload:
		return m.OldPayload(ctx)
	case notification.FieldTTL:
		return m.OldTTL(ctx)
	case notification.FieldStatus:
		return m.OldStatus(ctx)
	case notification.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notification.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notification.FieldPlannedAt:
		return m.OldPlannedAt(ctx)
	case notification.FieldRetryAt:
		return m.OldRetryAt(ctx)
	case notification.FieldRetries:
		return m.OldRetries(ctx)
	case notification.FieldSentAt:
		return m.OldSentAt(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldSenderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderID(v)
		return nil
	case notification.FieldType:
		v, ok := value.(schema.NotificationType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case notification.FieldPayload:
		v, ok := value.(schema.Payload)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case notification.FieldTTL:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTTL(v)
		return nil
	case notification.FieldStatus:
		v, ok := value.(schema.NotificationStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case notification.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notification.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notification.FieldPlannedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlannedAt(v)
		return nil
	case notification.FieldRetryAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryAt(v)
		return nil
	case notification.FieldRetries:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetries(v)
		return nil
	case notification.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	var fields []string
	if m.addsender_id != nil {
		fields = append(fields, notification.FieldSenderID)
	}
	if m.addttl != nil {
		fields = append(fields, notification.FieldTTL)
	}
	if m.addretries != nil {
		fields = append(fields, notification.FieldRetries)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldSenderID:
		return m.AddedSenderID()
	case notification.FieldTTL:
		return m.AddedTTL()
	case notification.FieldRetries:
		return m.AddedRetries()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notification.FieldSenderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSenderID(v)
		return nil
	case notification.FieldTTL:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTTL(v)
		return nil
	case notification.FieldRetries:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetries(v)
		return nil
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notification.FieldRetryAt) {
		fields = append(fields, notification.FieldRetryAt)
	}
	if m.FieldCleared(notification.FieldSentAt) {
		fields = append(fields, notification.FieldSentAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	switch name {
	case notification.FieldRetryAt:
		m.ClearRetryAt()
		return nil
	case notification.FieldSentAt:
		m.ClearSentAt()
		return nil
	}
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldSenderID:
		m.ResetSenderID()
		return nil
	case notification.FieldType:
		m.ResetType()
		return nil
	case notification.FieldPayload:
		m.ResetPayload()
		return nil
	case notification.FieldTTL:
		m.ResetTTL()
		return nil
	case notification.FieldStatus:
		m.ResetStatus()
		return nil
	case notification.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notification.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notification.FieldPlannedAt:
		m.ResetPlannedAt()
		return nil
	case notification.FieldRetryAt:
		m.ResetRetryAt()
		return nil
	case notification.FieldRetries:
		m.ResetRetries()
		return nil
	case notification.FieldSentAt:
		m.ResetSentAt()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Notification edge %s", name)
}
