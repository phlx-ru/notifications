// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notifications/ent/notification"
	"notifications/ent/predicate"
	"notifications/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetSenderID sets the "sender_id" field.
func (nu *NotificationUpdate) SetSenderID(i int) *NotificationUpdate {
	nu.mutation.ResetSenderID()
	nu.mutation.SetSenderID(i)
	return nu
}

// AddSenderID adds i to the "sender_id" field.
func (nu *NotificationUpdate) AddSenderID(i int) *NotificationUpdate {
	nu.mutation.AddSenderID(i)
	return nu
}

// SetType sets the "type" field.
func (nu *NotificationUpdate) SetType(st schema.NotificationType) *NotificationUpdate {
	nu.mutation.SetType(st)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableType(st *schema.NotificationType) *NotificationUpdate {
	if st != nil {
		nu.SetType(*st)
	}
	return nu
}

// SetPayload sets the "payload" field.
func (nu *NotificationUpdate) SetPayload(s schema.Payload) *NotificationUpdate {
	nu.mutation.SetPayload(s)
	return nu
}

// SetTTL sets the "ttl" field.
func (nu *NotificationUpdate) SetTTL(i int) *NotificationUpdate {
	nu.mutation.ResetTTL()
	nu.mutation.SetTTL(i)
	return nu
}

// AddTTL adds i to the "ttl" field.
func (nu *NotificationUpdate) AddTTL(i int) *NotificationUpdate {
	nu.mutation.AddTTL(i)
	return nu
}

// SetStatus sets the "status" field.
func (nu *NotificationUpdate) SetStatus(ss schema.NotificationStatus) *NotificationUpdate {
	nu.mutation.SetStatus(ss)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableStatus(ss *schema.NotificationStatus) *NotificationUpdate {
	if ss != nil {
		nu.SetStatus(*ss)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableUpdatedAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetUpdatedAt(*t)
	}
	return nu
}

// SetPlannedAt sets the "planned_at" field.
func (nu *NotificationUpdate) SetPlannedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetPlannedAt(t)
	return nu
}

// SetNillablePlannedAt sets the "planned_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillablePlannedAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetPlannedAt(*t)
	}
	return nu
}

// SetRetries sets the "retries" field.
func (nu *NotificationUpdate) SetRetries(i int) *NotificationUpdate {
	nu.mutation.ResetRetries()
	nu.mutation.SetRetries(i)
	return nu
}

// SetNillableRetries sets the "retries" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableRetries(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetRetries(*i)
	}
	return nu
}

// AddRetries adds i to the "retries" field.
func (nu *NotificationUpdate) AddRetries(i int) *NotificationUpdate {
	nu.mutation.AddRetries(i)
	return nu
}

// SetSentAt sets the "sent_at" field.
func (nu *NotificationUpdate) SetSentAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetSentAt(t)
	return nu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSentAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetSentAt(*t)
	}
	return nu
}

// ClearSentAt clears the value of the "sent_at" field.
func (nu *NotificationUpdate) ClearSentAt() *NotificationUpdate {
	nu.mutation.ClearSentAt()
	return nu
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.GetType(); ok {
		if err := notification.TypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Status(); ok {
		if err := notification.StatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Notification.status": %w`, err)}
		}
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notification.Table,
			Columns: notification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notification.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.SenderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldSenderID,
		})
	}
	if value, ok := nu.mutation.AddedSenderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldSenderID,
		})
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notification.FieldType,
		})
	}
	if value, ok := nu.mutation.Payload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: notification.FieldPayload,
		})
	}
	if value, ok := nu.mutation.TTL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldTTL,
		})
	}
	if value, ok := nu.mutation.AddedTTL(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldTTL,
		})
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notification.FieldStatus,
		})
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notification.FieldUpdatedAt,
		})
	}
	if value, ok := nu.mutation.PlannedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notification.FieldPlannedAt,
		})
	}
	if value, ok := nu.mutation.Retries(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldRetries,
		})
	}
	if value, ok := nu.mutation.AddedRetries(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldRetries,
		})
	}
	if value, ok := nu.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notification.FieldSentAt,
		})
	}
	if nu.mutation.SentAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: notification.FieldSentAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetSenderID sets the "sender_id" field.
func (nuo *NotificationUpdateOne) SetSenderID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetSenderID()
	nuo.mutation.SetSenderID(i)
	return nuo
}

// AddSenderID adds i to the "sender_id" field.
func (nuo *NotificationUpdateOne) AddSenderID(i int) *NotificationUpdateOne {
	nuo.mutation.AddSenderID(i)
	return nuo
}

// SetType sets the "type" field.
func (nuo *NotificationUpdateOne) SetType(st schema.NotificationType) *NotificationUpdateOne {
	nuo.mutation.SetType(st)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableType(st *schema.NotificationType) *NotificationUpdateOne {
	if st != nil {
		nuo.SetType(*st)
	}
	return nuo
}

// SetPayload sets the "payload" field.
func (nuo *NotificationUpdateOne) SetPayload(s schema.Payload) *NotificationUpdateOne {
	nuo.mutation.SetPayload(s)
	return nuo
}

// SetTTL sets the "ttl" field.
func (nuo *NotificationUpdateOne) SetTTL(i int) *NotificationUpdateOne {
	nuo.mutation.ResetTTL()
	nuo.mutation.SetTTL(i)
	return nuo
}

// AddTTL adds i to the "ttl" field.
func (nuo *NotificationUpdateOne) AddTTL(i int) *NotificationUpdateOne {
	nuo.mutation.AddTTL(i)
	return nuo
}

// SetStatus sets the "status" field.
func (nuo *NotificationUpdateOne) SetStatus(ss schema.NotificationStatus) *NotificationUpdateOne {
	nuo.mutation.SetStatus(ss)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableStatus(ss *schema.NotificationStatus) *NotificationUpdateOne {
	if ss != nil {
		nuo.SetStatus(*ss)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableUpdatedAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetUpdatedAt(*t)
	}
	return nuo
}

// SetPlannedAt sets the "planned_at" field.
func (nuo *NotificationUpdateOne) SetPlannedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetPlannedAt(t)
	return nuo
}

// SetNillablePlannedAt sets the "planned_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillablePlannedAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetPlannedAt(*t)
	}
	return nuo
}

// SetRetries sets the "retries" field.
func (nuo *NotificationUpdateOne) SetRetries(i int) *NotificationUpdateOne {
	nuo.mutation.ResetRetries()
	nuo.mutation.SetRetries(i)
	return nuo
}

// SetNillableRetries sets the "retries" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableRetries(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetRetries(*i)
	}
	return nuo
}

// AddRetries adds i to the "retries" field.
func (nuo *NotificationUpdateOne) AddRetries(i int) *NotificationUpdateOne {
	nuo.mutation.AddRetries(i)
	return nuo
}

// SetSentAt sets the "sent_at" field.
func (nuo *NotificationUpdateOne) SetSentAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetSentAt(t)
	return nuo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSentAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetSentAt(*t)
	}
	return nuo
}

// ClearSentAt clears the value of the "sent_at" field.
func (nuo *NotificationUpdateOne) ClearSentAt() *NotificationUpdateOne {
	nuo.mutation.ClearSentAt()
	return nuo
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	var (
		err  error
		node *Notification
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Notification)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotificationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.GetType(); ok {
		if err := notification.TypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Status(); ok {
		if err := notification.StatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Notification.status": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notification.Table,
			Columns: notification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notification.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.SenderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldSenderID,
		})
	}
	if value, ok := nuo.mutation.AddedSenderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldSenderID,
		})
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notification.FieldType,
		})
	}
	if value, ok := nuo.mutation.Payload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: notification.FieldPayload,
		})
	}
	if value, ok := nuo.mutation.TTL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldTTL,
		})
	}
	if value, ok := nuo.mutation.AddedTTL(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldTTL,
		})
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notification.FieldStatus,
		})
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notification.FieldUpdatedAt,
		})
	}
	if value, ok := nuo.mutation.PlannedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notification.FieldPlannedAt,
		})
	}
	if value, ok := nuo.mutation.Retries(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldRetries,
		})
	}
	if value, ok := nuo.mutation.AddedRetries(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notification.FieldRetries,
		})
	}
	if value, ok := nuo.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notification.FieldSentAt,
		})
	}
	if nuo.mutation.SentAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: notification.FieldSentAt,
		})
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
